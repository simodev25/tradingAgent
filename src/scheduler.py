"""
Scheduler pour ex√©cution automatique du trading agent aux quarts d'heure
(00, 15, 30, 45) avec gestion de timezone et √©criture atomique des r√©sultats.
"""

import asyncio
import json
import os
import signal
import sys
import tempfile
from datetime import datetime, time
from typing import Dict, List, Any

import pytz
from loguru import logger
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from apscheduler.triggers.date import DateTrigger

# Import du trading agent
from agents import trading_agent


class TradingScheduler:
    def __init__(self, config_path: str = "config.json"):
        self.config_path = config_path
        self.config = self._load_config()

        # Timezone depuis la config (ex: "Europe/Paris")
        timezone_str = self.config.get("scheduler", {}).get("timezone", "UTC")
        self.tz = pytz.timezone(timezone_str)

        # Scheduler avec timezone coh√©rente
        self.scheduler = AsyncIOScheduler(timezone=self.tz)

        self.running = False
        self.results: List[Dict[str, Any]] = []

        # Configuration du logging
        self._setup_logging()

    def _load_config(self) -> Dict[str, Any]:
        """Charge la configuration depuis le fichier JSON"""
        try:
            with open(self.config_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            logger.error(f"Fichier de configuration {self.config_path} non trouv√©")
            sys.exit(1)
        except json.JSONDecodeError as e:
            logger.error(f"Erreur de parsing JSON dans {self.config_path}: {e}")
            sys.exit(1)

    def _setup_logging(self):
        """Configure le syst√®me de logging"""
        log_config = self.config.get("logging", {})
        level = log_config.get("level", "INFO")
        log_file = log_config.get("file", "trading_agent.log")
        max_size = log_config.get("max_size", "10MB")
        backup_count = log_config.get("backup_count", 5)

        # Supprime les handlers existants
        logger.remove()

        # Handler console
        logger.add(
            sys.stdout,
            level=level,
            format="<green>{time:YYYY-MM-DD HH:mm:ss}</green> | "
                   "<level>{level: <8}</level> | "
                   "<cyan>{name}</cyan>:<cyan>{function}</cyan>:<cyan>{line}</cyan> - "
                   "<level>{message}</level>"
        )

        # Handler fichier
        logger.add(
            log_file,
            level=level,
            format="{time:YYYY-MM-DD HH:mm:ss} | {level: <8} | {name}:{function}:{line} - {message}",
            rotation=max_size,
            retention=backup_count,
            compression="zip"
        )

    async def _process_symbol(self, symbol_config: Dict[str, Any]) -> Dict[str, Any]:
        """Traite un symbole individuel"""
        symbol = symbol_config["symbol"]
        logger.info(f"üîÑ Traitement du symbole: {symbol}")

        try:
            # Pr√©paration des param√®tres
            params = {
                "symbol": symbol,
                "period": symbol_config.get("period", "5d"),
                "interval": symbol_config.get("interval", "15m"),
                "horizon": symbol_config.get("horizon", "scalping"),
                "risk_level": symbol_config.get("risk_level", "high"),
                "default_volume": symbol_config.get("default_volume", 0.01),
                "min_confidence": symbol_config.get("min_confidence", 40),
                "honor_hold": self.config["global_settings"].get("honor_hold", True),
                "dry_run": self.config["global_settings"].get("dry_run", True),
                "news_top_n": self.config["global_settings"].get("news_top_n", 10),
                "include_columns": self.config["global_settings"].get("include_columns", "Open,High,Low,Close,Volume"),
            }

            # Ex√©cution du trading agent
            result = await trading_agent(params)

            logger.success(f"‚úÖ Symbole {symbol} result {result} ")
            # Ajout de m√©tadonn√©es
            result["timestamp"] = datetime.now(self.tz).isoformat()
            result["status"] = "success"

            logger.success(f"‚úÖ Symbole {symbol} trait√© avec succ√®s")

            return result

        except Exception as e:
            logger.error(f"‚ùå Erreur lors du traitement de {symbol}: {str(e)}")
            return {
                "symbol": symbol,
                "timestamp": datetime.now(self.tz).isoformat(),
                "status": "error",
                "error": str(e),
            }

    async def _run_trading_cycle(self):
        """Ex√©cute un cycle complet de trading pour tous les symboles"""
        logger.info("üöÄ D√©but du cycle de trading")
        start_time = datetime.now(self.tz)

        symbols = self.config["symbols"]
        max_concurrent = self.config["global_settings"].get("max_concurrent_symbols", 3)

        # Traitement par lots pour limiter la concurrence
        results: List[Dict[str, Any]] = []
        for i in range(0, len(symbols), max_concurrent):
            batch = symbols[i:i + max_concurrent]
            logger.info(f"üìä Traitement du lot {i // max_concurrent + 1}: {[s['symbol'] for s in batch]}")

            tasks = [self._process_symbol(symbol_config) for symbol_config in batch]
            batch_results = await asyncio.gather(*tasks, return_exceptions=True)

            for result in batch_results:
                if isinstance(result, Exception):
                    logger.error(f"‚ùå Exception dans le lot: {result}")
                else:
                    results.append(result)

            # Petite pause entre lots
            if i + max_concurrent < len(symbols):
                await asyncio.sleep(2)

        # Sauvegarde des r√©sultats
        self.results.extend(results)
        self._save_results()

        # Statistiques
        success_count = sum(1 for r in results if r.get("status") == "success")
        error_count = len(results) - success_count
        duration = (datetime.now(self.tz) - start_time).total_seconds()

        logger.info(f"üìà Cycle termin√©: {success_count} succ√®s, {error_count} erreurs en {duration:.2f}s")

    def _save_results(self):
        """Sauvegarde les r√©sultats dans un fichier JSON, de mani√®re atomique"""
        results_file = f"results_{datetime.now(self.tz).strftime('%Y%m%d')}.json"
        try:
            dirname = os.path.dirname(results_file) or "."
            os.makedirs(dirname, exist_ok=True)

            with tempfile.NamedTemporaryFile('w', delete=False, dir=dirname, encoding='utf-8') as tf:
                json.dump(self.results, tf, indent=2, ensure_ascii=False)
                temp_name = tf.name

            os.replace(temp_name, results_file)
            logger.debug(f"üíæ R√©sultats sauvegard√©s dans {results_file}")
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la sauvegarde: {e}")

    def _is_trading_time(self) -> bool:
        """V√©rifie si c'est le bon moment pour trader (g√®re fen√™tres overnight)."""
        scheduler_config = self.config.get("scheduler", {})
        if not scheduler_config.get("enabled", True):
            return True

        start_time_str = scheduler_config.get("start_time", "09:00")
        end_time_str = scheduler_config.get("end_time", "17:00")

        try:
            now_t = datetime.now(self.tz).time()
            start_t = time.fromisoformat(start_time_str)
            end_t = time.fromisoformat(end_time_str)

            if start_t == end_t:
                # fen√™tre 24/7 si m√™mes heures
                return True
            if start_t < end_t:
                # fen√™tre dans la m√™me journ√©e
                return start_t <= now_t <= end_t
            else:
                # fen√™tre overnight (ex: 22:00 -> 06:00)
                return now_t >= start_t or now_t <= end_t
        except Exception as e:
            logger.error(f"‚ùå Erreur de v√©rification de l'heure: {e}")
            return True

    async def _scheduled_task(self):
        """T√¢che programm√©e principale"""
        if not self._is_trading_time():
            logger.info("‚è∞ Hors des heures de trading, cycle ignor√©")
            return

        try:
            await self._run_trading_cycle()
        except Exception as e:
            logger.error(f"‚ùå Erreur dans la t√¢che programm√©e: {e}")

    def start(self):
        """D√©marre le scheduler avec alignement exact 00/15/30/45"""
        if self.running:
            logger.warning("‚ö†Ô∏è Le scheduler est d√©j√† en cours d'ex√©cution")
            return

        scheduler_config = self.config.get("scheduler", {})
        if not scheduler_config.get("enabled", True):
            logger.info("‚è∏Ô∏è Scheduler d√©sactiv√© dans la configuration")
            return

        # (Re)configure explicitement la TZ au cas o√π
        self.scheduler.configure(timezone=self.tz)

        # D√©clencheur align√© sur 0,15,30,45 (seconde = 0), configurable via config.json
        cron_expr = scheduler_config.get("cron_trigger", "0,15,30,45")
        cron_trigger = CronTrigger(
            minute=cron_expr,
            second=0,
            timezone=self.tz
        )

        # Job r√©current strictement aux quarts d'heure
        self.scheduler.add_job(
            self._scheduled_task,
            trigger=cron_trigger,
            id="trading_cycle",
            name="Trading Cycle (*/15 aligned)",
            replace_existing=True,
            max_instances=1,        # √©vite chevauchement si une run dure longtemps
            coalesce=True,          # regroupe les ex√©cutions manqu√©es en une seule
            misfire_grace_time=120  # tol√©rance (s) si le process se r√©veille en retard
        )

        # Option : ex√©cuter une fois imm√©diatement au d√©marrage
        run_on_start = scheduler_config.get("run_on_start", True)
        if run_on_start:
            self.scheduler.add_job(
                self._scheduled_task,
                trigger=DateTrigger(run_date=datetime.now(self.tz)),
                id="trading_cycle_boot",
                name="Trading Cycle (boot)",
                replace_existing=True,
            )

        self.scheduler.start()
        self.running = True

        logger.info(f"üöÄ Scheduler d√©marr√© - Ex√©cution align√©e aux {cron_expr}")
        logger.info(f"üåç Timezone: {self.tz.zone}")
        logger.info(f"‚è∞ Heures de trading: {scheduler_config.get('start_time', '09:00')} - {scheduler_config.get('end_time', '17:00')}")
        if run_on_start:
            logger.info("‚ñ∂Ô∏è Ex√©cution imm√©diate au d√©marrage activ√©e")

    def stop(self):
        """Arr√™te le scheduler"""
        if not self.running:
            logger.warning("‚ö†Ô∏è Le scheduler n'est pas en cours d'ex√©cution")
            return

        self.scheduler.shutdown(wait=True)
        self.running = False
        logger.info("üõë Scheduler arr√™t√©")

    async def run_once(self):
        """Ex√©cute un cycle unique (pour les tests)"""
        logger.info("üß™ Ex√©cution d'un cycle unique")
        await self._run_trading_cycle()


def signal_handler(signum, frame):
    """Gestionnaire de signaux pour arr√™t propre"""
    logger.info(f"üì° Signal {signum} re√ßu, arr√™t en cours...")
    if 'scheduler' in globals():
        scheduler.stop()
    sys.exit(0)


async def main():
    """Fonction principale"""
    global scheduler

    # Configuration des signaux (Unix)
    try:
        signal.signal(signal.SIGINT, signal_handler)
        signal.signal(signal.SIGTERM, signal_handler)
    except Exception:
        # Environnements qui ne supportent pas signal (ex: Windows/threads)
        pass

    # Cr√©ation et d√©marrage du scheduler
    scheduler = TradingScheduler()

    try:
        # V√©rification des arguments de ligne de commande
        if len(sys.argv) > 1 and sys.argv[1] == "--once":
            # Ex√©cution unique
            await scheduler.run_once()
        else:
            # Mode scheduler
            scheduler.start()

            # Boucle infinie
            while True:
                await asyncio.sleep(1)

    except KeyboardInterrupt:
        logger.info("‚å®Ô∏è Interruption clavier d√©tect√©e")
    except Exception as e:
        logger.error(f"‚ùå Erreur fatale: {e}")
    finally:
        scheduler.stop()


if __name__ == "__main__":
    asyncio.run(main())
